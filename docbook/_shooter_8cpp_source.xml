<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__shooter_8cpp_source" xml:lang="en-US">
<title>Shooter.cpp</title>
<indexterm><primary>src/main/cpp/subsystems/Shooter.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__shooter_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__shooter_8h">subsystems/Shooter.h</link>&quot;</emphasis>
<anchor xml:id="__shooter_8cpp_source_1l00002"/>00002 
<anchor xml:id="__shooter_8cpp_source_1l00003"/><link linkend="_class_shooter_1acc429ebafcc36bb592c752097c22657f">00003</link> <link linkend="_class_shooter_1acc429ebafcc36bb592c752097c22657f">Shooter::Shooter</link>()
<anchor xml:id="__shooter_8cpp_source_1l00004"/>00004 {
<anchor xml:id="__shooter_8cpp_source_1l00005"/>00005 &#32;&#32;&#32;&#32;m_PIDController.SetTolerance(<link linkend="__constants_8h_1a6169fbbdf8b2b5a2e812737aeb6e8b05">k_shooterPIDTolerance</link>);
<anchor xml:id="__shooter_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;m_encoder.SetVelocityConversionFactor(<link linkend="__constants_8h_1aebfbf8c3695ef3d028e4f779b85059b9">k_shooterVCF</link>);
<anchor xml:id="__shooter_8cpp_source_1l00007"/>00007 }
<anchor xml:id="__shooter_8cpp_source_1l00008"/>00008 
<anchor xml:id="__shooter_8cpp_source_1l00009"/><link linkend="_class_shooter_1a2724023e11346b0bbdd9ed42006b7ff0">00009</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shooter_1a2724023e11346b0bbdd9ed42006b7ff0">Shooter::Periodic</link>()
<anchor xml:id="__shooter_8cpp_source_1l00010"/>00010 {
<anchor xml:id="__shooter_8cpp_source_1l00011"/>00011 }
<anchor xml:id="__shooter_8cpp_source_1l00012"/>00012 
<anchor xml:id="__shooter_8cpp_source_1l00013"/><link linkend="_class_shooter_1ac7cef43d52b4164973e3e10930076794">00013</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shooter_1ac7cef43d52b4164973e3e10930076794">Shooter::Reset</link>()
<anchor xml:id="__shooter_8cpp_source_1l00014"/>00014 {
<anchor xml:id="__shooter_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<link linkend="_class_shooter_1aa595c369250b14ef8eae01615bf2b64a">ResetEncoder</link>();
<anchor xml:id="__shooter_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<link linkend="_class_shooter_1ad8e07e828ef7f4e5f1af4776436b97ae">ResetServos</link>();
<anchor xml:id="__shooter_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<link linkend="_class_shooter_1a89acb718cbf766d2f606927b0601c473">SolenoidsOff</link>();
<anchor xml:id="__shooter_8cpp_source_1l00018"/>00018 }
<anchor xml:id="__shooter_8cpp_source_1l00019"/>00019 
<anchor xml:id="__shooter_8cpp_source_1l00020"/><link linkend="_class_shooter_1a8aec07b9a84ed0727abddf356898e9b3">00020</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shooter_1a8aec07b9a84ed0727abddf356898e9b3">Shooter::SetMotor</link>(<emphasis role="keywordtype">double</emphasis>&#32;speed)
<anchor xml:id="__shooter_8cpp_source_1l00021"/>00021 {
<anchor xml:id="__shooter_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;m_motor.Set(speed&#32;*&#32;<link linkend="__constants_8h_1a87e5de7144adbe2b485ba50beb5321e7">k_shooterMaxSpeed</link>);
<anchor xml:id="__shooter_8cpp_source_1l00023"/>00023 }
<anchor xml:id="__shooter_8cpp_source_1l00024"/>00024 
<anchor xml:id="__shooter_8cpp_source_1l00025"/><link linkend="_class_shooter_1ae46c0d81938a14f152b5ce98f801ffdb">00025</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_shooter_1ae46c0d81938a14f152b5ce98f801ffdb">Shooter::GetMotor</link>()
<anchor xml:id="__shooter_8cpp_source_1l00026"/>00026 {
<anchor xml:id="__shooter_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_motor.Get();
<anchor xml:id="__shooter_8cpp_source_1l00028"/>00028 }
<anchor xml:id="__shooter_8cpp_source_1l00029"/>00029 
<anchor xml:id="__shooter_8cpp_source_1l00030"/><link linkend="_class_shooter_1a5ac1a254530a93fa6fa18294f8dabe27">00030</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shooter_1a5ac1a254530a93fa6fa18294f8dabe27">Shooter::InvertMotor</link>(<emphasis role="keywordtype">bool</emphasis>&#32;inverted)
<anchor xml:id="__shooter_8cpp_source_1l00031"/>00031 {
<anchor xml:id="__shooter_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;m_motor.SetInverted(inverted);
<anchor xml:id="__shooter_8cpp_source_1l00033"/>00033 }
<anchor xml:id="__shooter_8cpp_source_1l00034"/>00034 
<anchor xml:id="__shooter_8cpp_source_1l00035"/><link linkend="_class_shooter_1a66eb01e6f77792930c773702b23cee49">00035</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shooter_1a66eb01e6f77792930c773702b23cee49">Shooter::PrintMotor</link>()
<anchor xml:id="__shooter_8cpp_source_1l00036"/>00036 {
<anchor xml:id="__shooter_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Shooter&#32;Motor&quot;</emphasis>,&#32;<link linkend="_class_shooter_1ae46c0d81938a14f152b5ce98f801ffdb">GetMotor</link>());
<anchor xml:id="__shooter_8cpp_source_1l00038"/>00038 }
<anchor xml:id="__shooter_8cpp_source_1l00039"/>00039 
<anchor xml:id="__shooter_8cpp_source_1l00040"/><link linkend="_class_shooter_1a84e75a932a92bd33f5d5e72f66158b03">00040</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_shooter_1a84e75a932a92bd33f5d5e72f66158b03">Shooter::GetEncoder</link>()
<anchor xml:id="__shooter_8cpp_source_1l00041"/>00041 {
<anchor xml:id="__shooter_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_encoder.GetVelocity();
<anchor xml:id="__shooter_8cpp_source_1l00043"/>00043 
<anchor xml:id="__shooter_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;:&#32;change&#32;if&#32;normal&#32;encoder</emphasis>
<anchor xml:id="__shooter_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;m_encoder.GetRate()</emphasis>
<anchor xml:id="__shooter_8cpp_source_1l00046"/>00046 }
<anchor xml:id="__shooter_8cpp_source_1l00047"/>00047 
<anchor xml:id="__shooter_8cpp_source_1l00048"/><link linkend="_class_shooter_1aa595c369250b14ef8eae01615bf2b64a">00048</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shooter_1aa595c369250b14ef8eae01615bf2b64a">Shooter::ResetEncoder</link>()
<anchor xml:id="__shooter_8cpp_source_1l00049"/>00049 {
<anchor xml:id="__shooter_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;m_encoder.SetPosition(0);
<anchor xml:id="__shooter_8cpp_source_1l00051"/>00051 
<anchor xml:id="__shooter_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;:&#32;change&#32;if&#32;normal&#32;encoder</emphasis>
<anchor xml:id="__shooter_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m_encoder.Reset();</emphasis>
<anchor xml:id="__shooter_8cpp_source_1l00054"/>00054 }
<anchor xml:id="__shooter_8cpp_source_1l00055"/>00055 
<anchor xml:id="__shooter_8cpp_source_1l00056"/><link linkend="_class_shooter_1a6fd5aca189d08d69c22e9dec55eba416">00056</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shooter_1a6fd5aca189d08d69c22e9dec55eba416">Shooter::InvertEncoder</link>(<emphasis role="keywordtype">bool</emphasis>&#32;inverted)
<anchor xml:id="__shooter_8cpp_source_1l00057"/>00057 {
<anchor xml:id="__shooter_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;m_encoder.SetInverted(inverted);
<anchor xml:id="__shooter_8cpp_source_1l00059"/>00059 
<anchor xml:id="__shooter_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;:&#32;change&#32;if&#32;normal&#32;encoder</emphasis>
<anchor xml:id="__shooter_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m_encoder.SetReverseDirection(inverted);</emphasis>
<anchor xml:id="__shooter_8cpp_source_1l00062"/>00062 }
<anchor xml:id="__shooter_8cpp_source_1l00063"/>00063 
<anchor xml:id="__shooter_8cpp_source_1l00064"/><link linkend="_class_shooter_1a3b628de0e1ad0a54b561bd566ae4b975">00064</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shooter_1a3b628de0e1ad0a54b561bd566ae4b975">Shooter::PrintEncoder</link>()
<anchor xml:id="__shooter_8cpp_source_1l00065"/>00065 {
<anchor xml:id="__shooter_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Shooter&#32;Encoder&quot;</emphasis>,&#32;<link linkend="_class_shooter_1a84e75a932a92bd33f5d5e72f66158b03">GetEncoder</link>());
<anchor xml:id="__shooter_8cpp_source_1l00067"/>00067 }
<anchor xml:id="__shooter_8cpp_source_1l00068"/>00068 
<anchor xml:id="__shooter_8cpp_source_1l00069"/><link linkend="_class_shooter_1a8288dd4cad5eb0f085745f853b25de93">00069</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_shooter_1a8288dd4cad5eb0f085745f853b25de93">Shooter::ReachRPM</link>(<emphasis role="keywordtype">double</emphasis>&#32;rpm)
<anchor xml:id="__shooter_8cpp_source_1l00070"/>00070 {
<anchor xml:id="__shooter_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;m_PIDController.SetSetpoint(rpm);
<anchor xml:id="__shooter_8cpp_source_1l00072"/>00072 
<anchor xml:id="__shooter_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;output&#32;=&#32;m_PIDController.Calculate(<link linkend="_class_shooter_1a84e75a932a92bd33f5d5e72f66158b03">GetEncoder</link>());
<anchor xml:id="__shooter_8cpp_source_1l00074"/>00074 
<anchor xml:id="__shooter_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;<link linkend="_class_shooter_1a8aec07b9a84ed0727abddf356898e9b3">SetMotor</link>(std::clamp(output,&#32;-<link linkend="__constants_8h_1a87e5de7144adbe2b485ba50beb5321e7">k_shooterMaxSpeed</link>,&#32;<link linkend="__constants_8h_1a87e5de7144adbe2b485ba50beb5321e7">k_shooterMaxSpeed</link>));
<anchor xml:id="__shooter_8cpp_source_1l00076"/>00076 
<anchor xml:id="__shooter_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_PIDController.AtSetpoint();
<anchor xml:id="__shooter_8cpp_source_1l00078"/>00078 }
<anchor xml:id="__shooter_8cpp_source_1l00079"/>00079 
<anchor xml:id="__shooter_8cpp_source_1l00080"/><link linkend="_class_shooter_1a705647ab4ea9b26f938a3c949a1b3b26">00080</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_shooter_1a705647ab4ea9b26f938a3c949a1b3b26">Shooter::CalculateRPM</link>()
<anchor xml:id="__shooter_8cpp_source_1l00081"/>00081 {
<anchor xml:id="__shooter_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__constants_8h_1ae4fe2f5b645163ffa1bba40721778fee">shooterRPMFromDistance</link>(m_limelight.<link linkend="_class_limelight_1ad05aee666ce49fe00af56b3da5ab4ae9">GetDistanceToTarget</link>());
<anchor xml:id="__shooter_8cpp_source_1l00083"/>00083 }
<anchor xml:id="__shooter_8cpp_source_1l00084"/>00084 
<anchor xml:id="__shooter_8cpp_source_1l00085"/><link linkend="_class_shooter_1a001e7d840f9ccf3960d9889891ec2b54">00085</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shooter_1a001e7d840f9ccf3960d9889891ec2b54">Shooter::ResetPID</link>()
<anchor xml:id="__shooter_8cpp_source_1l00086"/>00086 {
<anchor xml:id="__shooter_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;m_PIDController.Reset();
<anchor xml:id="__shooter_8cpp_source_1l00088"/>00088 }
<anchor xml:id="__shooter_8cpp_source_1l00089"/>00089 
<anchor xml:id="__shooter_8cpp_source_1l00090"/><link linkend="_class_shooter_1ac1ddd58052880f12e939363fd0ba253b">00090</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shooter_1ac1ddd58052880f12e939363fd0ba253b">Shooter::PrintPIDError</link>()
<anchor xml:id="__shooter_8cpp_source_1l00091"/>00091 {
<anchor xml:id="__shooter_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Shooter&#32;PID&#32;Error&quot;</emphasis>,&#32;m_PIDController.GetVelocityError());
<anchor xml:id="__shooter_8cpp_source_1l00093"/>00093 }
<anchor xml:id="__shooter_8cpp_source_1l00094"/>00094 
<anchor xml:id="__shooter_8cpp_source_1l00095"/><link linkend="_class_shooter_1a34ded1f3ec76ecf22460a1c1d8f2674b">00095</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shooter_1a34ded1f3ec76ecf22460a1c1d8f2674b">Shooter::SetAngleServos</link>(<emphasis role="keywordtype">double</emphasis>&#32;angle)
<anchor xml:id="__shooter_8cpp_source_1l00096"/>00096 {
<anchor xml:id="__shooter_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;m_rightServo.Set(angle);
<anchor xml:id="__shooter_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;m_leftServo.Set(angle);
<anchor xml:id="__shooter_8cpp_source_1l00099"/>00099 }
<anchor xml:id="__shooter_8cpp_source_1l00100"/>00100 
<anchor xml:id="__shooter_8cpp_source_1l00101"/><link linkend="_class_shooter_1ad8e07e828ef7f4e5f1af4776436b97ae">00101</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shooter_1ad8e07e828ef7f4e5f1af4776436b97ae">Shooter::ResetServos</link>()
<anchor xml:id="__shooter_8cpp_source_1l00102"/>00102 {
<anchor xml:id="__shooter_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;m_rightServo.Set(0);
<anchor xml:id="__shooter_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;m_leftServo.Set(0);
<anchor xml:id="__shooter_8cpp_source_1l00105"/>00105 }
<anchor xml:id="__shooter_8cpp_source_1l00106"/>00106 
<anchor xml:id="__shooter_8cpp_source_1l00107"/><link linkend="_class_shooter_1a553e8a885139e6ad6223a6d44fa932cc">00107</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_shooter_1a553e8a885139e6ad6223a6d44fa932cc">Shooter::GetRightServo</link>()
<anchor xml:id="__shooter_8cpp_source_1l00108"/>00108 {
<anchor xml:id="__shooter_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_rightServo.Get();
<anchor xml:id="__shooter_8cpp_source_1l00110"/>00110 }
<anchor xml:id="__shooter_8cpp_source_1l00111"/>00111 
<anchor xml:id="__shooter_8cpp_source_1l00112"/><link linkend="_class_shooter_1a9741d799e6ebce9463cfd5c028f0ea63">00112</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_shooter_1a9741d799e6ebce9463cfd5c028f0ea63">Shooter::GetLeftServo</link>()
<anchor xml:id="__shooter_8cpp_source_1l00113"/>00113 {
<anchor xml:id="__shooter_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_leftServo.Get();
<anchor xml:id="__shooter_8cpp_source_1l00115"/>00115 }
<anchor xml:id="__shooter_8cpp_source_1l00116"/>00116 
<anchor xml:id="__shooter_8cpp_source_1l00117"/><link linkend="_class_shooter_1a7b744be3d8430e7fd9b2a011f110d34f">00117</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shooter_1a7b744be3d8430e7fd9b2a011f110d34f">Shooter::PrintServos</link>()
<anchor xml:id="__shooter_8cpp_source_1l00118"/>00118 {
<anchor xml:id="__shooter_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Shooter&#32;Right&#32;Servo&quot;</emphasis>,&#32;<link linkend="_class_shooter_1a553e8a885139e6ad6223a6d44fa932cc">GetRightServo</link>());
<anchor xml:id="__shooter_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Shooter&#32;Left&#32;Servo&quot;</emphasis>,&#32;<link linkend="_class_shooter_1a9741d799e6ebce9463cfd5c028f0ea63">GetLeftServo</link>());
<anchor xml:id="__shooter_8cpp_source_1l00121"/>00121 }
<anchor xml:id="__shooter_8cpp_source_1l00122"/>00122 
<anchor xml:id="__shooter_8cpp_source_1l00123"/><link linkend="_class_shooter_1a25595e8df8cc799bc991ac94faf70f33">00123</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shooter_1a25595e8df8cc799bc991ac94faf70f33">Shooter::SetAngleSolenoids</link>(<emphasis role="keywordtype">bool</emphasis>&#32;forward)
<anchor xml:id="__shooter_8cpp_source_1l00124"/>00124 {
<anchor xml:id="__shooter_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(forward&#32;^&#32;m_solenoidsInverted)
<anchor xml:id="__shooter_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;{
<anchor xml:id="__shooter_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_rightSolenoid.Set(DoubleSolenoid::Value::kForward);
<anchor xml:id="__shooter_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_leftSolenoid.Set(DoubleSolenoid::Value::kForward);
<anchor xml:id="__shooter_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;}
<anchor xml:id="__shooter_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__shooter_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;{
<anchor xml:id="__shooter_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_rightSolenoid.Set(DoubleSolenoid::Value::kReverse);
<anchor xml:id="__shooter_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_leftSolenoid.Set(DoubleSolenoid::Value::kReverse);
<anchor xml:id="__shooter_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;}
<anchor xml:id="__shooter_8cpp_source_1l00135"/>00135 }
<anchor xml:id="__shooter_8cpp_source_1l00136"/>00136 
<anchor xml:id="__shooter_8cpp_source_1l00137"/><link linkend="_class_shooter_1a89acb718cbf766d2f606927b0601c473">00137</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shooter_1a89acb718cbf766d2f606927b0601c473">Shooter::SolenoidsOff</link>()
<anchor xml:id="__shooter_8cpp_source_1l00138"/>00138 {
<anchor xml:id="__shooter_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;m_rightSolenoid.Set(DoubleSolenoid::Value::kOff);
<anchor xml:id="__shooter_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;m_leftSolenoid.Set(DoubleSolenoid::Value::kOff);
<anchor xml:id="__shooter_8cpp_source_1l00141"/>00141 }
<anchor xml:id="__shooter_8cpp_source_1l00142"/>00142 
<anchor xml:id="__shooter_8cpp_source_1l00143"/><link linkend="_class_shooter_1a3b76c25f3999d3a05e710e5170f2a642">00143</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_shooter_1a3b76c25f3999d3a05e710e5170f2a642">Shooter::GetRightSolenoid</link>()
<anchor xml:id="__shooter_8cpp_source_1l00144"/>00144 {
<anchor xml:id="__shooter_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_rightSolenoid.Get();
<anchor xml:id="__shooter_8cpp_source_1l00146"/>00146 }
<anchor xml:id="__shooter_8cpp_source_1l00147"/>00147 
<anchor xml:id="__shooter_8cpp_source_1l00148"/><link linkend="_class_shooter_1a4d070235a6b8f78255e73394b7918863">00148</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_shooter_1a4d070235a6b8f78255e73394b7918863">Shooter::GetLeftSolenoid</link>()
<anchor xml:id="__shooter_8cpp_source_1l00149"/>00149 {
<anchor xml:id="__shooter_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_leftSolenoid.Get();
<anchor xml:id="__shooter_8cpp_source_1l00151"/>00151 }
<anchor xml:id="__shooter_8cpp_source_1l00152"/>00152 
<anchor xml:id="__shooter_8cpp_source_1l00153"/><link linkend="_class_shooter_1a4c3abb0e6f70f70d87f5f2d55b624d18">00153</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shooter_1a4c3abb0e6f70f70d87f5f2d55b624d18">Shooter::PrintSolenoids</link>()
<anchor xml:id="__shooter_8cpp_source_1l00154"/>00154 {
<anchor xml:id="__shooter_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;SmartDashboard::PutBoolean(<emphasis role="stringliteral">&quot;Shooter&#32;Right&#32;Solenoid&quot;</emphasis>,&#32;<link linkend="_class_shooter_1a3b76c25f3999d3a05e710e5170f2a642">GetRightSolenoid</link>());
<anchor xml:id="__shooter_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;SmartDashboard::PutBoolean(<emphasis role="stringliteral">&quot;Shooter&#32;Left&#32;Solenoid&quot;</emphasis>,&#32;<link linkend="_class_shooter_1a4d070235a6b8f78255e73394b7918863">GetLeftSolenoid</link>());
<anchor xml:id="__shooter_8cpp_source_1l00157"/>00157 }
</programlisting></section>
