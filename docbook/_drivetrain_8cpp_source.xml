<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__drivetrain_8cpp_source" xml:lang="en-US">
<title>Drivetrain.cpp</title>
<indexterm><primary>src/main/cpp/subsystems/Drivetrain.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__drivetrain_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__drivetrain_8h">subsystems/Drivetrain.h</link>&quot;</emphasis>
<anchor xml:id="__drivetrain_8cpp_source_1l00002"/>00002 
<anchor xml:id="__drivetrain_8cpp_source_1l00003"/>00003 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
<anchor xml:id="__drivetrain_8cpp_source_1l00004"/>00004 
<anchor xml:id="__drivetrain_8cpp_source_1l00005"/><link linkend="_class_drivetrain_1abfcc3eea7516b5f76422d39676adbd27">00005</link> <link linkend="_class_drivetrain_1abfcc3eea7516b5f76422d39676adbd27">Drivetrain::Drivetrain</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00006"/>00006 {
<anchor xml:id="__drivetrain_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;m_frontRightEncoder.SetPositionConversionFactor(<link linkend="__constants_8h_1a895b330b47c4cda862d6a83355445746">k_drivetrainDPR</link>);
<anchor xml:id="__drivetrain_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;m_frontLeftEncoder.SetPositionConversionFactor(<link linkend="__constants_8h_1a895b330b47c4cda862d6a83355445746">k_drivetrainDPR</link>);
<anchor xml:id="__drivetrain_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;m_backRightEncoder.SetPositionConversionFactor(<link linkend="__constants_8h_1a895b330b47c4cda862d6a83355445746">k_drivetrainDPR</link>);
<anchor xml:id="__drivetrain_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;m_backLeftEncoder.SetPositionConversionFactor(<link linkend="__constants_8h_1a895b330b47c4cda862d6a83355445746">k_drivetrainDPR</link>);
<anchor xml:id="__drivetrain_8cpp_source_1l00011"/>00011 }
<anchor xml:id="__drivetrain_8cpp_source_1l00012"/>00012 
<anchor xml:id="__drivetrain_8cpp_source_1l00013"/><link linkend="_class_drivetrain_1aaab7ed6f92b39f5450595de9e49217e3">00013</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1aaab7ed6f92b39f5450595de9e49217e3">Drivetrain::Periodic</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00014"/>00014 {
<anchor xml:id="__drivetrain_8cpp_source_1l00015"/>00015 }
<anchor xml:id="__drivetrain_8cpp_source_1l00016"/>00016 
<anchor xml:id="__drivetrain_8cpp_source_1l00017"/>00017 <emphasis role="comment">//&#32;---------------------&#32;Control&#32;----------------------</emphasis>
<anchor xml:id="__drivetrain_8cpp_source_1l00018"/>00018 
<anchor xml:id="__drivetrain_8cpp_source_1l00019"/><link linkend="_class_drivetrain_1a2a8e83c0d0800f32573d05b7d0017517">00019</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a2a8e83c0d0800f32573d05b7d0017517">Drivetrain::Drive</link>(<emphasis role="keywordtype">double</emphasis>&#32;speed,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rotation)
<anchor xml:id="__drivetrain_8cpp_source_1l00020"/>00020 {
<anchor xml:id="__drivetrain_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;m_drive.ArcadeDrive(speed&#32;*&#32;m_speedDirection&#32;*&#32;<link linkend="__constants_8h_1ae9208af5f2d2b5058f64a0f2b42ddfa3">k_drivetrainMaxSpeed</link>,&#32;rotation&#32;*&#32;m_rotationDirection&#32;*&#32;<link linkend="__constants_8h_1a11de03f501a5134e925510eb491140c4">k_drivetrainMaxRotation</link>);
<anchor xml:id="__drivetrain_8cpp_source_1l00022"/>00022 }
<anchor xml:id="__drivetrain_8cpp_source_1l00023"/>00023 
<anchor xml:id="__drivetrain_8cpp_source_1l00024"/><link linkend="_class_drivetrain_1a102e6dfdd03b5ffc3febdb34de935ec3">00024</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a102e6dfdd03b5ffc3febdb34de935ec3">Drivetrain::Reset</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00025"/>00025 {
<anchor xml:id="__drivetrain_8cpp_source_1l00026"/>00026 
<anchor xml:id="__drivetrain_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<link linkend="_class_drivetrain_1aa63b09496786d2472f8eb68b5b4a2063">ResetGyro</link>();
<anchor xml:id="__drivetrain_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<link linkend="_class_drivetrain_1a0b14cd9cb776da62f7589da7618cdeee">ResetEncoders</link>();
<anchor xml:id="__drivetrain_8cpp_source_1l00029"/>00029 
<anchor xml:id="__drivetrain_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;m_drive.SetSafetyEnabled(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__drivetrain_8cpp_source_1l00031"/>00031 
<anchor xml:id="__drivetrain_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;m_speedDirection&#32;=&#32;1;
<anchor xml:id="__drivetrain_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;m_rotationDirection&#32;=&#32;1;
<anchor xml:id="__drivetrain_8cpp_source_1l00034"/>00034 }
<anchor xml:id="__drivetrain_8cpp_source_1l00035"/>00035 
<anchor xml:id="__drivetrain_8cpp_source_1l00036"/><link linkend="_class_drivetrain_1a1b36fe27e7a9e58a075d4f176f3fac0d">00036</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a1b36fe27e7a9e58a075d4f176f3fac0d">Drivetrain::InvertSpeed</link>(<emphasis role="keywordtype">bool</emphasis>&#32;invert)
<anchor xml:id="__drivetrain_8cpp_source_1l00037"/>00037 {
<anchor xml:id="__drivetrain_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;m_speedDirection&#32;=&#32;invert&#32;?&#32;-1&#32;:&#32;1;
<anchor xml:id="__drivetrain_8cpp_source_1l00039"/>00039 }
<anchor xml:id="__drivetrain_8cpp_source_1l00040"/>00040 
<anchor xml:id="__drivetrain_8cpp_source_1l00041"/><link linkend="_class_drivetrain_1af20eee44b87d89348acdaf8def755284">00041</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1af20eee44b87d89348acdaf8def755284">Drivetrain::InvertRotation</link>(<emphasis role="keywordtype">bool</emphasis>&#32;invert)
<anchor xml:id="__drivetrain_8cpp_source_1l00042"/>00042 {
<anchor xml:id="__drivetrain_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;m_rotationDirection&#32;=&#32;invert&#32;?&#32;-1&#32;:&#32;1;
<anchor xml:id="__drivetrain_8cpp_source_1l00044"/>00044 }
<anchor xml:id="__drivetrain_8cpp_source_1l00045"/>00045 
<anchor xml:id="__drivetrain_8cpp_source_1l00046"/><link linkend="_class_drivetrain_1ad6090defa5f627403c482bbeec22a8b6">00046</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1ad6090defa5f627403c482bbeec22a8b6">Drivetrain::SetSafetyEnabled</link>(<emphasis role="keywordtype">bool</emphasis>&#32;enabled)
<anchor xml:id="__drivetrain_8cpp_source_1l00047"/>00047 {
<anchor xml:id="__drivetrain_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;m_drive.SetSafetyEnabled(enabled);
<anchor xml:id="__drivetrain_8cpp_source_1l00049"/>00049 }
<anchor xml:id="__drivetrain_8cpp_source_1l00050"/>00050 
<anchor xml:id="__drivetrain_8cpp_source_1l00051"/>00051 <emphasis role="comment">//&#32;----------------------&#32;Motors&#32;----------------------</emphasis>
<anchor xml:id="__drivetrain_8cpp_source_1l00052"/>00052 
<anchor xml:id="__drivetrain_8cpp_source_1l00053"/><link linkend="_class_drivetrain_1a632d9e57aff0453021101f3f9264d9b6">00053</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a632d9e57aff0453021101f3f9264d9b6">Drivetrain::ResetMotors</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00054"/>00054 {
<anchor xml:id="__drivetrain_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;m_frontRight.RestoreFactoryDefaults();
<anchor xml:id="__drivetrain_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;m_frontLeft.RestoreFactoryDefaults();
<anchor xml:id="__drivetrain_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;m_backRight.RestoreFactoryDefaults();
<anchor xml:id="__drivetrain_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;m_backLeft.RestoreFactoryDefaults();
<anchor xml:id="__drivetrain_8cpp_source_1l00059"/>00059 }
<anchor xml:id="__drivetrain_8cpp_source_1l00060"/>00060 
<anchor xml:id="__drivetrain_8cpp_source_1l00061"/><link linkend="_class_drivetrain_1ae3e25ce7bbc97ac1912f703ca36c20e7">00061</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1ae3e25ce7bbc97ac1912f703ca36c20e7">Drivetrain::InvertRight</link>(<emphasis role="keywordtype">bool</emphasis>&#32;invert)
<anchor xml:id="__drivetrain_8cpp_source_1l00062"/>00062 {
<anchor xml:id="__drivetrain_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;m_right.SetInverted(invert);
<anchor xml:id="__drivetrain_8cpp_source_1l00064"/>00064 }
<anchor xml:id="__drivetrain_8cpp_source_1l00065"/>00065 
<anchor xml:id="__drivetrain_8cpp_source_1l00066"/><link linkend="_class_drivetrain_1a6248133734bb47d86d3e7d2d46d6c7be">00066</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a6248133734bb47d86d3e7d2d46d6c7be">Drivetrain::InvertLeft</link>(<emphasis role="keywordtype">bool</emphasis>&#32;invert)
<anchor xml:id="__drivetrain_8cpp_source_1l00067"/>00067 {
<anchor xml:id="__drivetrain_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;m_left.SetInverted(invert);
<anchor xml:id="__drivetrain_8cpp_source_1l00069"/>00069 }
<anchor xml:id="__drivetrain_8cpp_source_1l00070"/>00070 
<anchor xml:id="__drivetrain_8cpp_source_1l00071"/><link linkend="_class_drivetrain_1a264fc3fd471cb02c39e26e87277ab970">00071</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a264fc3fd471cb02c39e26e87277ab970">Drivetrain::PrintMotors</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00072"/>00072 {
<anchor xml:id="__drivetrain_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Front&#32;Right&#32;Motor&quot;</emphasis>,&#32;m_frontRight.Get());
<anchor xml:id="__drivetrain_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Front&#32;Left&#32;Motor&quot;</emphasis>,&#32;m_frontLeft.Get());
<anchor xml:id="__drivetrain_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Back&#32;Right&#32;Motor&quot;</emphasis>,&#32;m_backRight.Get());
<anchor xml:id="__drivetrain_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Back&#32;Left&#32;Motor&quot;</emphasis>,&#32;m_backLeft.Get());
<anchor xml:id="__drivetrain_8cpp_source_1l00077"/>00077 }
<anchor xml:id="__drivetrain_8cpp_source_1l00078"/>00078 
<anchor xml:id="__drivetrain_8cpp_source_1l00079"/>00079 <emphasis role="comment">//&#32;---------------------&#32;Encoders&#32;---------------------</emphasis>
<anchor xml:id="__drivetrain_8cpp_source_1l00080"/>00080 
<anchor xml:id="__drivetrain_8cpp_source_1l00081"/><link linkend="_class_drivetrain_1a3115ec088361b83d74a4d95d7b2915e7">00081</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_drivetrain_1a3115ec088361b83d74a4d95d7b2915e7">Drivetrain::GetRightEncoders</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00082"/>00082 {
<anchor xml:id="__drivetrain_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_frontRightEncoder.GetPosition()&#32;+&#32;m_backRightEncoder.GetPosition())&#32;/&#32;2;
<anchor xml:id="__drivetrain_8cpp_source_1l00084"/>00084 }
<anchor xml:id="__drivetrain_8cpp_source_1l00085"/>00085 
<anchor xml:id="__drivetrain_8cpp_source_1l00086"/><link linkend="_class_drivetrain_1ac5dcbd091bee9d908aae86f989b83630">00086</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_drivetrain_1ac5dcbd091bee9d908aae86f989b83630">Drivetrain::GetLeftEncoders</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00087"/>00087 {
<anchor xml:id="__drivetrain_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m_frontLeftEncoder.GetPosition()&#32;+&#32;m_backLeftEncoder.GetPosition())&#32;/&#32;2;
<anchor xml:id="__drivetrain_8cpp_source_1l00089"/>00089 }
<anchor xml:id="__drivetrain_8cpp_source_1l00090"/>00090 
<anchor xml:id="__drivetrain_8cpp_source_1l00091"/><link linkend="_class_drivetrain_1a548f0fea9392b195712cfa7403fe44ba">00091</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_drivetrain_1a548f0fea9392b195712cfa7403fe44ba">Drivetrain::GetEncoderAverage</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00092"/>00092 {
<anchor xml:id="__drivetrain_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_class_drivetrain_1a3115ec088361b83d74a4d95d7b2915e7">GetRightEncoders</link>()&#32;+&#32;<link linkend="_class_drivetrain_1ac5dcbd091bee9d908aae86f989b83630">GetLeftEncoders</link>())&#32;/&#32;2;
<anchor xml:id="__drivetrain_8cpp_source_1l00094"/>00094 }
<anchor xml:id="__drivetrain_8cpp_source_1l00095"/>00095 
<anchor xml:id="__drivetrain_8cpp_source_1l00096"/><link linkend="_class_drivetrain_1a0b14cd9cb776da62f7589da7618cdeee">00096</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a0b14cd9cb776da62f7589da7618cdeee">Drivetrain::ResetEncoders</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00097"/>00097 {
<anchor xml:id="__drivetrain_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;m_frontRightEncoder.SetPosition(0);
<anchor xml:id="__drivetrain_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;m_frontLeftEncoder.SetPosition(0);
<anchor xml:id="__drivetrain_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;m_backRightEncoder.SetPosition(0);
<anchor xml:id="__drivetrain_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;m_backLeftEncoder.SetPosition(0);
<anchor xml:id="__drivetrain_8cpp_source_1l00102"/>00102 }
<anchor xml:id="__drivetrain_8cpp_source_1l00103"/>00103 
<anchor xml:id="__drivetrain_8cpp_source_1l00104"/><link linkend="_class_drivetrain_1ade6fcfa0f1d33b5a6ab23d4d39c51c58">00104</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1ade6fcfa0f1d33b5a6ab23d4d39c51c58">Drivetrain::InvertRightEncoders</link>(<emphasis role="keywordtype">bool</emphasis>&#32;invert)
<anchor xml:id="__drivetrain_8cpp_source_1l00105"/>00105 {
<anchor xml:id="__drivetrain_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;m_frontRightEncoder.SetInverted(invert);
<anchor xml:id="__drivetrain_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;m_backRightEncoder.SetInverted(invert);
<anchor xml:id="__drivetrain_8cpp_source_1l00108"/>00108 }
<anchor xml:id="__drivetrain_8cpp_source_1l00109"/>00109 
<anchor xml:id="__drivetrain_8cpp_source_1l00110"/><link linkend="_class_drivetrain_1a90d349ff54025dec06c273b65cb0ac7b">00110</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a90d349ff54025dec06c273b65cb0ac7b">Drivetrain::InvertLeftEncoders</link>(<emphasis role="keywordtype">bool</emphasis>&#32;invert)
<anchor xml:id="__drivetrain_8cpp_source_1l00111"/>00111 {
<anchor xml:id="__drivetrain_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;m_frontLeftEncoder.SetInverted(invert);
<anchor xml:id="__drivetrain_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;m_backLeftEncoder.SetInverted(invert);
<anchor xml:id="__drivetrain_8cpp_source_1l00114"/>00114 }
<anchor xml:id="__drivetrain_8cpp_source_1l00115"/>00115 
<anchor xml:id="__drivetrain_8cpp_source_1l00116"/><link linkend="_class_drivetrain_1a7231873edf8c1be04e40f085a04b13aa">00116</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a7231873edf8c1be04e40f085a04b13aa">Drivetrain::PrintEncoders</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00117"/>00117 {
<anchor xml:id="__drivetrain_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Front&#32;Right&#32;Encoder&quot;</emphasis>,&#32;m_frontRightEncoder.GetPosition());
<anchor xml:id="__drivetrain_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Front&#32;Left&#32;Encoder&quot;</emphasis>,&#32;m_frontLeftEncoder.GetPosition());
<anchor xml:id="__drivetrain_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Back&#32;Right&#32;Encoder&quot;</emphasis>,&#32;m_backRightEncoder.GetPosition());
<anchor xml:id="__drivetrain_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Back&#32;Left&#32;Encoder&quot;</emphasis>,&#32;m_backLeftEncoder.GetPosition());
<anchor xml:id="__drivetrain_8cpp_source_1l00122"/>00122 }
<anchor xml:id="__drivetrain_8cpp_source_1l00123"/>00123 
<anchor xml:id="__drivetrain_8cpp_source_1l00124"/>00124 <emphasis role="comment">//&#32;-----------------------&#32;Gyro&#32;-----------------------</emphasis>
<anchor xml:id="__drivetrain_8cpp_source_1l00125"/>00125 
<anchor xml:id="__drivetrain_8cpp_source_1l00126"/><link linkend="_class_drivetrain_1aeb0ad112fc2e33313134a352bd79ccc8">00126</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_drivetrain_1aeb0ad112fc2e33313134a352bd79ccc8">Drivetrain::GetGyro</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00127"/>00127 {
<anchor xml:id="__drivetrain_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_gyro.GetAngle().value()&#32;*&#32;m_gyroDirection;
<anchor xml:id="__drivetrain_8cpp_source_1l00129"/>00129 }
<anchor xml:id="__drivetrain_8cpp_source_1l00130"/>00130 
<anchor xml:id="__drivetrain_8cpp_source_1l00131"/><link linkend="_class_drivetrain_1a281f925dba295d9d14beb932c67c3192">00131</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_drivetrain_1a281f925dba295d9d14beb932c67c3192">Drivetrain::GetGyroRad</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00132"/>00132 {
<anchor xml:id="__drivetrain_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_drivetrain_1aeb0ad112fc2e33313134a352bd79ccc8">GetGyro</link>()&#32;*&#32;(M_PI&#32;/&#32;180);
<anchor xml:id="__drivetrain_8cpp_source_1l00134"/>00134 }
<anchor xml:id="__drivetrain_8cpp_source_1l00135"/>00135 
<anchor xml:id="__drivetrain_8cpp_source_1l00136"/><link linkend="_class_drivetrain_1aa63b09496786d2472f8eb68b5b4a2063">00136</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1aa63b09496786d2472f8eb68b5b4a2063">Drivetrain::ResetGyro</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00137"/>00137 {
<anchor xml:id="__drivetrain_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;m_gyro.Reset();
<anchor xml:id="__drivetrain_8cpp_source_1l00139"/>00139 }
<anchor xml:id="__drivetrain_8cpp_source_1l00140"/>00140 
<anchor xml:id="__drivetrain_8cpp_source_1l00141"/><link linkend="_class_drivetrain_1adbbeb7dea4c6b7d1e760fde991ca9c08">00141</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1adbbeb7dea4c6b7d1e760fde991ca9c08">Drivetrain::InvertGyro</link>(<emphasis role="keywordtype">bool</emphasis>&#32;invert)
<anchor xml:id="__drivetrain_8cpp_source_1l00142"/>00142 {
<anchor xml:id="__drivetrain_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;m_gyroDirection&#32;=&#32;invert&#32;?&#32;-1&#32;:&#32;1;
<anchor xml:id="__drivetrain_8cpp_source_1l00144"/>00144 }
<anchor xml:id="__drivetrain_8cpp_source_1l00145"/>00145 
<anchor xml:id="__drivetrain_8cpp_source_1l00146"/><link linkend="_class_drivetrain_1a5666edd674a1aa863c05d9402fbcce90">00146</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a5666edd674a1aa863c05d9402fbcce90">Drivetrain::PrintGyro</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00147"/>00147 {
<anchor xml:id="__drivetrain_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Gyro&quot;</emphasis>,&#32;<link linkend="_class_drivetrain_1aeb0ad112fc2e33313134a352bd79ccc8">GetGyro</link>());
<anchor xml:id="__drivetrain_8cpp_source_1l00149"/>00149 }
<anchor xml:id="__drivetrain_8cpp_source_1l00150"/>00150 
<anchor xml:id="__drivetrain_8cpp_source_1l00151"/><link linkend="_class_drivetrain_1a6715ed0bc5cde62b767b6388d9296c6f">00151</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a6715ed0bc5cde62b767b6388d9296c6f">Drivetrain::PrintGyroRad</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00152"/>00152 {
<anchor xml:id="__drivetrain_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Gyro&#32;Rad&quot;</emphasis>,&#32;<link linkend="_class_drivetrain_1a281f925dba295d9d14beb932c67c3192">GetGyroRad</link>());
<anchor xml:id="__drivetrain_8cpp_source_1l00154"/>00154 }
<anchor xml:id="__drivetrain_8cpp_source_1l00155"/>00155 
<anchor xml:id="__drivetrain_8cpp_source_1l00156"/>00156 <emphasis role="comment">//&#32;-----------------------&#32;Auto&#32;-----------------------</emphasis>
<anchor xml:id="__drivetrain_8cpp_source_1l00157"/>00157 
<anchor xml:id="__drivetrain_8cpp_source_1l00158"/><link linkend="_class_drivetrain_1ac50530290af4e91020bf3973310ea6af">00158</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_drivetrain_1ac50530290af4e91020bf3973310ea6af">Drivetrain::Move</link>(<emphasis role="keywordtype">double</emphasis>&#32;distance,&#32;<emphasis role="keywordtype">double</emphasis>&#32;speed)
<anchor xml:id="__drivetrain_8cpp_source_1l00159"/>00159 {
<anchor xml:id="__drivetrain_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;m_movePIDController.SetSetpoint(distance);
<anchor xml:id="__drivetrain_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;m_movePIDController.SetTolerance(<link linkend="__constants_8h_1ac38626902ef25c26780c0093be545bef">k_movePIDTolerance</link>);
<anchor xml:id="__drivetrain_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;output&#32;=&#32;m_movePIDController.Calculate(-<link linkend="_class_drivetrain_1a548f0fea9392b195712cfa7403fe44ba">GetEncoderAverage</link>());
<anchor xml:id="__drivetrain_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;output&#32;=&#32;clamp(output,&#32;-speed,&#32;speed);
<anchor xml:id="__drivetrain_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;<link linkend="_class_drivetrain_1a2a8e83c0d0800f32573d05b7d0017517">Drive</link>(output&#32;*&#32;speed,&#32;0);
<anchor xml:id="__drivetrain_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_movePIDController.AtSetpoint();
<anchor xml:id="__drivetrain_8cpp_source_1l00166"/>00166 }
<anchor xml:id="__drivetrain_8cpp_source_1l00167"/>00167 
<anchor xml:id="__drivetrain_8cpp_source_1l00168"/><link linkend="_class_drivetrain_1a30e1914280c2368691008c154af6c90c">00168</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_drivetrain_1a30e1914280c2368691008c154af6c90c">Drivetrain::Turn</link>(<emphasis role="keywordtype">double</emphasis>&#32;angle,&#32;<emphasis role="keywordtype">double</emphasis>&#32;speed)
<anchor xml:id="__drivetrain_8cpp_source_1l00169"/>00169 {
<anchor xml:id="__drivetrain_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;m_turnPIDController.SetSetpoint(angle);
<anchor xml:id="__drivetrain_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;m_turnPIDController.SetTolerance(<link linkend="__constants_8h_1a3cfe81e470008c293ab42cadab63f15b">k_turnPIDTolerance</link>);
<anchor xml:id="__drivetrain_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;output&#32;=&#32;m_turnPIDController.Calculate(<link linkend="_class_drivetrain_1aeb0ad112fc2e33313134a352bd79ccc8">GetGyro</link>());
<anchor xml:id="__drivetrain_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;output&#32;=&#32;clamp(output,&#32;-speed,&#32;speed);
<anchor xml:id="__drivetrain_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;<link linkend="_class_drivetrain_1a2a8e83c0d0800f32573d05b7d0017517">Drive</link>(0,&#32;output&#32;*&#32;speed);
<anchor xml:id="__drivetrain_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_turnPIDController.AtSetpoint();
<anchor xml:id="__drivetrain_8cpp_source_1l00176"/>00176 }
<anchor xml:id="__drivetrain_8cpp_source_1l00177"/>00177 
<anchor xml:id="__drivetrain_8cpp_source_1l00178"/><link linkend="_class_drivetrain_1a4a8d358bc5d5ba4b6532eb35e75ea41e">00178</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_drivetrain_1a4a8d358bc5d5ba4b6532eb35e75ea41e">Drivetrain::MoveTo</link>(<emphasis role="keywordtype">double</emphasis>&#32;x,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y,&#32;<emphasis role="keywordtype">double</emphasis>&#32;speed,&#32;<emphasis role="keywordtype">double</emphasis>&#32;turnSpeed)
<anchor xml:id="__drivetrain_8cpp_source_1l00179"/>00179 {
<anchor xml:id="__drivetrain_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;targetX&#32;=&#32;x&#32;-&#32;m_currentX;
<anchor xml:id="__drivetrain_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;targetY&#32;=&#32;y&#32;-&#32;m_currentY;
<anchor xml:id="__drivetrain_8cpp_source_1l00182"/>00182 
<anchor xml:id="__drivetrain_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;angle&#32;=&#32;<link linkend="_class_drivetrain_1a6a6102b66ad56463d21c05a340861cfd">GetAbsoluteAngle</link>(targetX,&#32;targetY);
<anchor xml:id="__drivetrain_8cpp_source_1l00184"/>00184 
<anchor xml:id="__drivetrain_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_drivetrain_1a30e1914280c2368691008c154af6c90c">Turn</link>(angle,&#32;turnSpeed))
<anchor xml:id="__drivetrain_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;{
<anchor xml:id="__drivetrain_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;distance&#32;=&#32;sqrt(pow(targetX,&#32;2)&#32;+&#32;pow(targetY,&#32;2));
<anchor xml:id="__drivetrain_8cpp_source_1l00188"/>00188 
<anchor xml:id="__drivetrain_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_drivetrain_1ac50530290af4e91020bf3973310ea6af">Move</link>(distance,&#32;speed))
<anchor xml:id="__drivetrain_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__drivetrain_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_drivetrain_1a0b14cd9cb776da62f7589da7618cdeee">ResetEncoders</link>();
<anchor xml:id="__drivetrain_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_currentX&#32;=&#32;x;
<anchor xml:id="__drivetrain_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_currentY&#32;=&#32;y;
<anchor xml:id="__drivetrain_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__drivetrain_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__drivetrain_8cpp_source_1l00196"/>00196 
<anchor xml:id="__drivetrain_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__drivetrain_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;}
<anchor xml:id="__drivetrain_8cpp_source_1l00199"/>00199 
<anchor xml:id="__drivetrain_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__drivetrain_8cpp_source_1l00201"/>00201 }
<anchor xml:id="__drivetrain_8cpp_source_1l00202"/>00202 
<anchor xml:id="__drivetrain_8cpp_source_1l00203"/><link linkend="_class_drivetrain_1aa5a3ae0a443fb9c8eb1b7201da399358">00203</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_drivetrain_1aa5a3ae0a443fb9c8eb1b7201da399358">Drivetrain::AlignWithTarget</link>(<emphasis role="keywordtype">double</emphasis>&#32;speed)
<anchor xml:id="__drivetrain_8cpp_source_1l00204"/>00204 {
<anchor xml:id="__drivetrain_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;m_alignPIDController.SetSetpoint(0);
<anchor xml:id="__drivetrain_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;m_alignPIDController.SetTolerance(<link linkend="__constants_8h_1adbe3a016245505112626d93c8b62bb19">k_alignPIDTolerance</link>);
<anchor xml:id="__drivetrain_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;output&#32;=&#32;m_alignPIDController.Calculate(m_limelight.<link linkend="_class_limelight_1ab7d744c9a6d457f9a5ed8b98d5ecdf79">GetHorizontalAngle</link>());
<anchor xml:id="__drivetrain_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;output&#32;=&#32;clamp(output,&#32;-speed,&#32;speed);
<anchor xml:id="__drivetrain_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;<link linkend="_class_drivetrain_1a2a8e83c0d0800f32573d05b7d0017517">Drive</link>(0,&#32;output&#32;*&#32;speed);
<anchor xml:id="__drivetrain_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_alignPIDController.AtSetpoint();
<anchor xml:id="__drivetrain_8cpp_source_1l00211"/>00211 }
<anchor xml:id="__drivetrain_8cpp_source_1l00212"/>00212 
<anchor xml:id="__drivetrain_8cpp_source_1l00213"/><link linkend="_class_drivetrain_1a4b4a900f38437b36e6ba6ef10dac44f3">00213</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_drivetrain_1a4b4a900f38437b36e6ba6ef10dac44f3">Drivetrain::SetDistanceWithTarget</link>(<emphasis role="keywordtype">double</emphasis>&#32;distance,&#32;<emphasis role="keywordtype">double</emphasis>&#32;speed)
<anchor xml:id="__drivetrain_8cpp_source_1l00214"/>00214 {
<anchor xml:id="__drivetrain_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;m_distancePIDController.SetSetpoint(distance);
<anchor xml:id="__drivetrain_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;output&#32;=&#32;m_distancePIDController.Calculate(m_limelight.<link linkend="_class_limelight_1ad05aee666ce49fe00af56b3da5ab4ae9">GetDistanceToTarget</link>());
<anchor xml:id="__drivetrain_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;output&#32;=&#32;clamp(output,&#32;-speed,&#32;speed);
<anchor xml:id="__drivetrain_8cpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;<link linkend="_class_drivetrain_1a2a8e83c0d0800f32573d05b7d0017517">Drive</link>(output&#32;*&#32;speed,&#32;0);
<anchor xml:id="__drivetrain_8cpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_distancePIDController.AtSetpoint();
<anchor xml:id="__drivetrain_8cpp_source_1l00220"/>00220 }
<anchor xml:id="__drivetrain_8cpp_source_1l00221"/>00221 
<anchor xml:id="__drivetrain_8cpp_source_1l00222"/><link linkend="_class_drivetrain_1aace237adc60b9d6a5c046931197ccc54">00222</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_drivetrain_1aace237adc60b9d6a5c046931197ccc54">Drivetrain::SetAngleWithTarget</link>(<emphasis role="keywordtype">double</emphasis>&#32;angle,&#32;<emphasis role="keywordtype">double</emphasis>&#32;speed)
<anchor xml:id="__drivetrain_8cpp_source_1l00223"/>00223 {
<anchor xml:id="__drivetrain_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;m_alignPIDController.SetSetpoint(angle);
<anchor xml:id="__drivetrain_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;output&#32;=&#32;m_alignPIDController.Calculate(m_limelight.<link linkend="_class_limelight_1ab7d744c9a6d457f9a5ed8b98d5ecdf79">GetHorizontalAngle</link>());
<anchor xml:id="__drivetrain_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;output&#32;=&#32;clamp(output,&#32;-speed,&#32;speed);
<anchor xml:id="__drivetrain_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;<link linkend="_class_drivetrain_1a2a8e83c0d0800f32573d05b7d0017517">Drive</link>(0,&#32;output&#32;*&#32;speed);
<anchor xml:id="__drivetrain_8cpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_alignPIDController.AtSetpoint();
<anchor xml:id="__drivetrain_8cpp_source_1l00229"/>00229 }
<anchor xml:id="__drivetrain_8cpp_source_1l00230"/>00230 
<anchor xml:id="__drivetrain_8cpp_source_1l00231"/><link linkend="_class_drivetrain_1a935fa4d01b4aff480e32ed9c38259406">00231</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a935fa4d01b4aff480e32ed9c38259406">Drivetrain::ResetMovePIDController</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00232"/>00232 {
<anchor xml:id="__drivetrain_8cpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;m_movePIDController.Reset();
<anchor xml:id="__drivetrain_8cpp_source_1l00234"/>00234 }
<anchor xml:id="__drivetrain_8cpp_source_1l00235"/>00235 
<anchor xml:id="__drivetrain_8cpp_source_1l00236"/><link linkend="_class_drivetrain_1a9f741b8119353fba3dc67b5f0dbfdb89">00236</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a9f741b8119353fba3dc67b5f0dbfdb89">Drivetrain::ResetTurnPIDController</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00237"/>00237 {
<anchor xml:id="__drivetrain_8cpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;m_turnPIDController.Reset();
<anchor xml:id="__drivetrain_8cpp_source_1l00239"/>00239 }
<anchor xml:id="__drivetrain_8cpp_source_1l00240"/>00240 
<anchor xml:id="__drivetrain_8cpp_source_1l00241"/><link linkend="_class_drivetrain_1ac43993f933714c5be50441b911431fab">00241</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1ac43993f933714c5be50441b911431fab">Drivetrain::ResetAlignPIDController</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00242"/>00242 {
<anchor xml:id="__drivetrain_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;m_alignPIDController.Reset();
<anchor xml:id="__drivetrain_8cpp_source_1l00244"/>00244 }
<anchor xml:id="__drivetrain_8cpp_source_1l00245"/>00245 
<anchor xml:id="__drivetrain_8cpp_source_1l00246"/><link linkend="_class_drivetrain_1a05d3f2ef24b01a62208b124a946c8cd6">00246</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a05d3f2ef24b01a62208b124a946c8cd6">Drivetrain::ResetDistancePIDController</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00247"/>00247 {
<anchor xml:id="__drivetrain_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;m_distancePIDController.Reset();
<anchor xml:id="__drivetrain_8cpp_source_1l00249"/>00249 }
<anchor xml:id="__drivetrain_8cpp_source_1l00250"/>00250 
<anchor xml:id="__drivetrain_8cpp_source_1l00251"/><link linkend="_class_drivetrain_1a1f7843b5a8518c82b6671d72bceefe28">00251</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a1f7843b5a8518c82b6671d72bceefe28">Drivetrain::ResetPIDControllers</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00252"/>00252 {
<anchor xml:id="__drivetrain_8cpp_source_1l00253"/>00253 &#32;&#32;&#32;&#32;<link linkend="_class_drivetrain_1a935fa4d01b4aff480e32ed9c38259406">ResetMovePIDController</link>();
<anchor xml:id="__drivetrain_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;<link linkend="_class_drivetrain_1a9f741b8119353fba3dc67b5f0dbfdb89">ResetTurnPIDController</link>();
<anchor xml:id="__drivetrain_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;<link linkend="_class_drivetrain_1ac43993f933714c5be50441b911431fab">ResetAlignPIDController</link>();
<anchor xml:id="__drivetrain_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;<link linkend="_class_drivetrain_1a05d3f2ef24b01a62208b124a946c8cd6">ResetDistancePIDController</link>();
<anchor xml:id="__drivetrain_8cpp_source_1l00257"/>00257 }
<anchor xml:id="__drivetrain_8cpp_source_1l00258"/>00258 
<anchor xml:id="__drivetrain_8cpp_source_1l00259"/><link linkend="_class_drivetrain_1a1283d1154911a913b18a87247159c895">00259</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a1283d1154911a913b18a87247159c895">Drivetrain::PrintMoveError</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00260"/>00260 {
<anchor xml:id="__drivetrain_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Move&#32;Error&quot;</emphasis>,&#32;m_movePIDController.GetPositionError());
<anchor xml:id="__drivetrain_8cpp_source_1l00262"/>00262 }
<anchor xml:id="__drivetrain_8cpp_source_1l00263"/>00263 
<anchor xml:id="__drivetrain_8cpp_source_1l00264"/><link linkend="_class_drivetrain_1aab40ea3240ab1f0262e6f931015b868c">00264</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1aab40ea3240ab1f0262e6f931015b868c">Drivetrain::PrintTurnError</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00265"/>00265 {
<anchor xml:id="__drivetrain_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Turn&#32;Error&quot;</emphasis>,&#32;m_turnPIDController.GetPositionError());
<anchor xml:id="__drivetrain_8cpp_source_1l00267"/>00267 }
<anchor xml:id="__drivetrain_8cpp_source_1l00268"/>00268 
<anchor xml:id="__drivetrain_8cpp_source_1l00269"/><link linkend="_class_drivetrain_1a8acfe7793cb899720272f2438d8d7dbc">00269</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a8acfe7793cb899720272f2438d8d7dbc">Drivetrain::PrintMoveToError</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00270"/>00270 {
<anchor xml:id="__drivetrain_8cpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;<link linkend="_class_drivetrain_1a1283d1154911a913b18a87247159c895">PrintMoveError</link>();
<anchor xml:id="__drivetrain_8cpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;<link linkend="_class_drivetrain_1aab40ea3240ab1f0262e6f931015b868c">PrintTurnError</link>();
<anchor xml:id="__drivetrain_8cpp_source_1l00273"/>00273 }
<anchor xml:id="__drivetrain_8cpp_source_1l00274"/>00274 
<anchor xml:id="__drivetrain_8cpp_source_1l00275"/><link linkend="_class_drivetrain_1a12b1b678aa454cc67d3494601c6347e7">00275</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1a12b1b678aa454cc67d3494601c6347e7">Drivetrain::PrintAlignError</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00276"/>00276 {
<anchor xml:id="__drivetrain_8cpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Align&#32;Error&quot;</emphasis>,&#32;m_alignPIDController.GetPositionError());
<anchor xml:id="__drivetrain_8cpp_source_1l00278"/>00278 }
<anchor xml:id="__drivetrain_8cpp_source_1l00279"/>00279 
<anchor xml:id="__drivetrain_8cpp_source_1l00280"/><link linkend="_class_drivetrain_1adee58e9d133a795610ae569f7546c365">00280</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1adee58e9d133a795610ae569f7546c365">Drivetrain::PrintSetDistanceError</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00281"/>00281 {
<anchor xml:id="__drivetrain_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Set&#32;Distance&#32;Error&quot;</emphasis>,&#32;m_distancePIDController.GetPositionError());
<anchor xml:id="__drivetrain_8cpp_source_1l00283"/>00283 }
<anchor xml:id="__drivetrain_8cpp_source_1l00284"/>00284 
<anchor xml:id="__drivetrain_8cpp_source_1l00285"/><link linkend="_class_drivetrain_1a6a6102b66ad56463d21c05a340861cfd">00285</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_drivetrain_1a6a6102b66ad56463d21c05a340861cfd">Drivetrain::GetAbsoluteAngle</link>(<emphasis role="keywordtype">double</emphasis>&#32;x,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y)
<anchor xml:id="__drivetrain_8cpp_source_1l00286"/>00286 {
<anchor xml:id="__drivetrain_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;relAngle&#32;=&#32;atan(y&#32;/&#32;(x&#32;==&#32;0&#32;?&#32;0.01&#32;:&#32;x));
<anchor xml:id="__drivetrain_8cpp_source_1l00288"/>00288 
<anchor xml:id="__drivetrain_8cpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;&lt;&#32;0)
<anchor xml:id="__drivetrain_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;relAngle&#32;+=&#32;M_PI;
<anchor xml:id="__drivetrain_8cpp_source_1l00291"/>00291 
<anchor xml:id="__drivetrain_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(y&#32;&lt;&#32;0)
<anchor xml:id="__drivetrain_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;relAngle&#32;+=&#32;2&#32;*&#32;M_PI;
<anchor xml:id="__drivetrain_8cpp_source_1l00294"/>00294 
<anchor xml:id="__drivetrain_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(relAngle)*180&#32;/&#32;M_PI;
<anchor xml:id="__drivetrain_8cpp_source_1l00296"/>00296 }
<anchor xml:id="__drivetrain_8cpp_source_1l00297"/>00297 
<anchor xml:id="__drivetrain_8cpp_source_1l00298"/><link linkend="_class_drivetrain_1ab4ea4fff1c362668bfb049eba0461192">00298</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_drivetrain_1ab4ea4fff1c362668bfb049eba0461192">Drivetrain::PrintCurrentPosition</link>()
<anchor xml:id="__drivetrain_8cpp_source_1l00299"/>00299 {
<anchor xml:id="__drivetrain_8cpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Current&#32;X&quot;</emphasis>,&#32;m_currentX);
<anchor xml:id="__drivetrain_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Current&#32;Y&quot;</emphasis>,&#32;m_currentY);
<anchor xml:id="__drivetrain_8cpp_source_1l00302"/>00302 }
</programlisting></section>
