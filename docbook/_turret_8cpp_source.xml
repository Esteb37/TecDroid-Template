<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__turret_8cpp_source" xml:lang="en-US">
<title>Turret.cpp</title>
<indexterm><primary>src/main/cpp/subsystems/Turret.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__turret_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__turret_8h">subsystems/Turret.h</link>&quot;</emphasis>
<anchor xml:id="__turret_8cpp_source_1l00002"/>00002 
<anchor xml:id="__turret_8cpp_source_1l00003"/>00003 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
<anchor xml:id="__turret_8cpp_source_1l00004"/>00004 
<anchor xml:id="__turret_8cpp_source_1l00005"/><link linkend="_class_turret_1a716b97b5618cc59c9b095954f92fd47c">00005</link> <link linkend="_class_turret_1a716b97b5618cc59c9b095954f92fd47c">Turret::Turret</link>()
<anchor xml:id="__turret_8cpp_source_1l00006"/>00006 {
<anchor xml:id="__turret_8cpp_source_1l00007"/>00007 
<anchor xml:id="__turret_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;m_encoder.SetDistancePerPulse(<link linkend="__constants_8h_1aef024814b64dbe1bdc664c482f57783f">k_turretDPR</link>);
<anchor xml:id="__turret_8cpp_source_1l00009"/>00009 
<anchor xml:id="__turret_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;:&#32;change&#32;if&#32;spark&#32;encoder</emphasis>
<anchor xml:id="__turret_8cpp_source_1l00011"/>00011 
<anchor xml:id="__turret_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m_encoder.SetPositionConversionFactor(k_turretDPR);</emphasis>
<anchor xml:id="__turret_8cpp_source_1l00013"/>00013 
<anchor xml:id="__turret_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;m_alignPID.SetTolerance(<link linkend="__constants_8h_1ad2febd1e9c2b24234d9cc6dc47bc1a0b">k_turretAlignPIDTolerance</link>);
<anchor xml:id="__turret_8cpp_source_1l00015"/>00015 
<anchor xml:id="__turret_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;m_anglePID.SetTolerance(<link linkend="__constants_8h_1af22e9db8e6f7fe002cc20603d4a9475e">k_turretAnglePIDTolerance</link>);
<anchor xml:id="__turret_8cpp_source_1l00017"/>00017 }
<anchor xml:id="__turret_8cpp_source_1l00018"/>00018 
<anchor xml:id="__turret_8cpp_source_1l00019"/><link linkend="_class_turret_1ae6438eb6ae5ec2be9346b5ad774ace2d">00019</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1ae6438eb6ae5ec2be9346b5ad774ace2d">Turret::Periodic</link>()
<anchor xml:id="__turret_8cpp_source_1l00020"/>00020 {
<anchor xml:id="__turret_8cpp_source_1l00021"/>00021 
<anchor xml:id="__turret_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_keepingStill)
<anchor xml:id="__turret_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;{
<anchor xml:id="__turret_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_angle&#32;=&#32;<link linkend="_class_turret_1a9a955b5d8d8569b9059dbf98db7be6aa">GetAngle</link>();
<anchor xml:id="__turret_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;}
<anchor xml:id="__turret_8cpp_source_1l00026"/>00026 
<anchor xml:id="__turret_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;m_keepingStill&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__turret_8cpp_source_1l00028"/>00028 }
<anchor xml:id="__turret_8cpp_source_1l00029"/>00029 
<anchor xml:id="__turret_8cpp_source_1l00030"/><link linkend="_class_turret_1ae0b01f3162930716cd54bbfbec2972fb">00030</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1ae0b01f3162930716cd54bbfbec2972fb">Turret::Turn</link>(<emphasis role="keywordtype">double</emphasis>&#32;speed)
<anchor xml:id="__turret_8cpp_source_1l00031"/>00031 {
<anchor xml:id="__turret_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<link linkend="_class_turret_1ae34f9f1ee2bc4bf488e1543f1d47c18d">SetMotor</link>(speed);
<anchor xml:id="__turret_8cpp_source_1l00033"/>00033 }
<anchor xml:id="__turret_8cpp_source_1l00034"/>00034 
<anchor xml:id="__turret_8cpp_source_1l00035"/><link linkend="_class_turret_1a67239926e9d9f7861ed4703d56778860">00035</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1a67239926e9d9f7861ed4703d56778860">Turret::Reset</link>()
<anchor xml:id="__turret_8cpp_source_1l00036"/>00036 {
<anchor xml:id="__turret_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<link linkend="_class_turret_1a3735033e9fdac249677a315f085269cc">ResetEncoder</link>();
<anchor xml:id="__turret_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<link linkend="_class_turret_1a64110a61bd1f885f3a41dc92856e541a">ResetAnglePID</link>();
<anchor xml:id="__turret_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<link linkend="_class_turret_1ab15c596c80b5395d3c91de7eab59aa14">ResetAlignPID</link>();
<anchor xml:id="__turret_8cpp_source_1l00040"/>00040 }
<anchor xml:id="__turret_8cpp_source_1l00041"/>00041 
<anchor xml:id="__turret_8cpp_source_1l00042"/><link linkend="_class_turret_1a3d89174d5a8dca20e62d28c80b250b6e">00042</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1a3d89174d5a8dca20e62d28c80b250b6e">Turret::KeepStill</link>()
<anchor xml:id="__turret_8cpp_source_1l00043"/>00043 {
<anchor xml:id="__turret_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;m_keepingStill&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__turret_8cpp_source_1l00045"/>00045 
<anchor xml:id="__turret_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<link linkend="_class_turret_1a69bdd8f0a95d6667a8d554cbea80cf1f">SetAngle</link>(m_angle);
<anchor xml:id="__turret_8cpp_source_1l00047"/>00047 }
<anchor xml:id="__turret_8cpp_source_1l00048"/>00048 
<anchor xml:id="__turret_8cpp_source_1l00049"/><link linkend="_class_turret_1a577d4ded6aa2912c0281acd261ce4b4a">00049</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_turret_1a577d4ded6aa2912c0281acd261ce4b4a">Turret::Center</link>()
<anchor xml:id="__turret_8cpp_source_1l00050"/>00050 {
<anchor xml:id="__turret_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_turret_1a69bdd8f0a95d6667a8d554cbea80cf1f">SetAngle</link>(0);
<anchor xml:id="__turret_8cpp_source_1l00052"/>00052 }
<anchor xml:id="__turret_8cpp_source_1l00053"/>00053 
<anchor xml:id="__turret_8cpp_source_1l00054"/><link linkend="_class_turret_1ae34f9f1ee2bc4bf488e1543f1d47c18d">00054</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1ae34f9f1ee2bc4bf488e1543f1d47c18d">Turret::SetMotor</link>(<emphasis role="keywordtype">double</emphasis>&#32;speed)
<anchor xml:id="__turret_8cpp_source_1l00055"/>00055 {
<anchor xml:id="__turret_8cpp_source_1l00056"/>00056 
<anchor xml:id="__turret_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_limitSafety)
<anchor xml:id="__turret_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;{
<anchor xml:id="__turret_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_turret_1a17c79f3bd5017e8927195523b8819356">GetRightLimit</link>())
<anchor xml:id="__turret_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__turret_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;speed&#32;=&#32;fmin(speed,&#32;0);
<anchor xml:id="__turret_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__turret_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_turret_1a0cd77f0b81e7df1ca3a20d1ac38cf856">GetLeftLimit</link>())
<anchor xml:id="__turret_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__turret_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;speed&#32;=&#32;fmax(speed,&#32;0);
<anchor xml:id="__turret_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__turret_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;}
<anchor xml:id="__turret_8cpp_source_1l00068"/>00068 
<anchor xml:id="__turret_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_angleSafety)
<anchor xml:id="__turret_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;{
<anchor xml:id="__turret_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_turret_1a9a955b5d8d8569b9059dbf98db7be6aa">GetAngle</link>()&#32;&gt;=&#32;<link linkend="__constants_8h_1a91a9d832d5437a6f5348cb59c300820a">k_turretMaxAngle</link>)
<anchor xml:id="__turret_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__turret_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;speed&#32;=&#32;fmin(speed,&#32;0);
<anchor xml:id="__turret_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__turret_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_turret_1a9a955b5d8d8569b9059dbf98db7be6aa">GetAngle</link>()&#32;&lt;=&#32;<link linkend="__constants_8h_1a4aa2a23c2abeee1db7928f8ccce0ff13">k_turretMinAngle</link>)
<anchor xml:id="__turret_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__turret_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;speed&#32;=&#32;fmax(speed,&#32;0);
<anchor xml:id="__turret_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__turret_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;}
<anchor xml:id="__turret_8cpp_source_1l00080"/>00080 
<anchor xml:id="__turret_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;m_motor.Set(speed&#32;*&#32;<link linkend="__constants_8h_1ad9fb74357005b971bccf06162d4e46ef">k_turretMaxSpeed</link>);
<anchor xml:id="__turret_8cpp_source_1l00082"/>00082 }
<anchor xml:id="__turret_8cpp_source_1l00083"/>00083 
<anchor xml:id="__turret_8cpp_source_1l00084"/><link linkend="_class_turret_1ad8a6d047f8f7b7382a4f3aae01a5c011">00084</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_turret_1ad8a6d047f8f7b7382a4f3aae01a5c011">Turret::GetMotor</link>()
<anchor xml:id="__turret_8cpp_source_1l00085"/>00085 {
<anchor xml:id="__turret_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_motor.Get();
<anchor xml:id="__turret_8cpp_source_1l00087"/>00087 }
<anchor xml:id="__turret_8cpp_source_1l00088"/>00088 
<anchor xml:id="__turret_8cpp_source_1l00089"/><link linkend="_class_turret_1a5717e06eca7a0fdbd9c92eb6bb7dfe81">00089</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1a5717e06eca7a0fdbd9c92eb6bb7dfe81">Turret::InvertMotor</link>(<emphasis role="keywordtype">bool</emphasis>&#32;inverted)
<anchor xml:id="__turret_8cpp_source_1l00090"/>00090 {
<anchor xml:id="__turret_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;m_motor.SetInverted(inverted);
<anchor xml:id="__turret_8cpp_source_1l00092"/>00092 }
<anchor xml:id="__turret_8cpp_source_1l00093"/>00093 
<anchor xml:id="__turret_8cpp_source_1l00094"/><link linkend="_class_turret_1af52c29af0886cca0e24c278bca72a85a">00094</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1af52c29af0886cca0e24c278bca72a85a">Turret::PrintMotor</link>()
<anchor xml:id="__turret_8cpp_source_1l00095"/>00095 {
<anchor xml:id="__turret_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Turret&#32;Motor&quot;</emphasis>,&#32;<link linkend="_class_turret_1ad8a6d047f8f7b7382a4f3aae01a5c011">GetMotor</link>());
<anchor xml:id="__turret_8cpp_source_1l00097"/>00097 }
<anchor xml:id="__turret_8cpp_source_1l00098"/>00098 
<anchor xml:id="__turret_8cpp_source_1l00099"/><link linkend="_class_turret_1ae3d7d4170a7755d24b8624adec4a26db">00099</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_turret_1ae3d7d4170a7755d24b8624adec4a26db">Turret::GetEncoder</link>()
<anchor xml:id="__turret_8cpp_source_1l00100"/>00100 {
<anchor xml:id="__turret_8cpp_source_1l00101"/>00101 
<anchor xml:id="__turret_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;:&#32;change&#32;if&#32;spark&#32;encoder</emphasis>
<anchor xml:id="__turret_8cpp_source_1l00103"/>00103 
<anchor xml:id="__turret_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;m_encoder.GetPosition();</emphasis>
<anchor xml:id="__turret_8cpp_source_1l00105"/>00105 
<anchor xml:id="__turret_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_encoder.GetDistance();
<anchor xml:id="__turret_8cpp_source_1l00107"/>00107 }
<anchor xml:id="__turret_8cpp_source_1l00108"/>00108 
<anchor xml:id="__turret_8cpp_source_1l00109"/><link linkend="_class_turret_1a3735033e9fdac249677a315f085269cc">00109</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1a3735033e9fdac249677a315f085269cc">Turret::ResetEncoder</link>()
<anchor xml:id="__turret_8cpp_source_1l00110"/>00110 {
<anchor xml:id="__turret_8cpp_source_1l00111"/>00111 
<anchor xml:id="__turret_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;:&#32;change&#32;if&#32;spark&#32;encoder</emphasis>
<anchor xml:id="__turret_8cpp_source_1l00113"/>00113 
<anchor xml:id="__turret_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m_encoder.SetPosition(0);</emphasis>
<anchor xml:id="__turret_8cpp_source_1l00115"/>00115 
<anchor xml:id="__turret_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;m_encoder.Reset();
<anchor xml:id="__turret_8cpp_source_1l00117"/>00117 }
<anchor xml:id="__turret_8cpp_source_1l00118"/>00118 
<anchor xml:id="__turret_8cpp_source_1l00119"/><link linkend="_class_turret_1af07791415230178b22ba2dff75d866a7">00119</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1af07791415230178b22ba2dff75d866a7">Turret::InvertEncoder</link>(<emphasis role="keywordtype">bool</emphasis>&#32;invert)
<anchor xml:id="__turret_8cpp_source_1l00120"/>00120 {
<anchor xml:id="__turret_8cpp_source_1l00121"/>00121 
<anchor xml:id="__turret_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;:&#32;change&#32;if&#32;spark&#32;encoder</emphasis>
<anchor xml:id="__turret_8cpp_source_1l00123"/>00123 
<anchor xml:id="__turret_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m_encoder.SetInverted(invert);</emphasis>
<anchor xml:id="__turret_8cpp_source_1l00125"/>00125 
<anchor xml:id="__turret_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;m_encoder.SetReverseDirection(invert);
<anchor xml:id="__turret_8cpp_source_1l00127"/>00127 }
<anchor xml:id="__turret_8cpp_source_1l00128"/>00128 
<anchor xml:id="__turret_8cpp_source_1l00129"/><link linkend="_class_turret_1ae154268736c97c75ad42dd7e73fc35f0">00129</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1ae154268736c97c75ad42dd7e73fc35f0">Turret::PrintEncoder</link>()
<anchor xml:id="__turret_8cpp_source_1l00130"/>00130 {
<anchor xml:id="__turret_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Turret&#32;Encoder&quot;</emphasis>,&#32;<link linkend="_class_turret_1ae3d7d4170a7755d24b8624adec4a26db">GetEncoder</link>());
<anchor xml:id="__turret_8cpp_source_1l00132"/>00132 }
<anchor xml:id="__turret_8cpp_source_1l00133"/>00133 
<anchor xml:id="__turret_8cpp_source_1l00134"/><link linkend="_class_turret_1a69bdd8f0a95d6667a8d554cbea80cf1f">00134</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_turret_1a69bdd8f0a95d6667a8d554cbea80cf1f">Turret::SetAngle</link>(<emphasis role="keywordtype">double</emphasis>&#32;angle)
<anchor xml:id="__turret_8cpp_source_1l00135"/>00135 {
<anchor xml:id="__turret_8cpp_source_1l00136"/>00136 
<anchor xml:id="__turret_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(angle&#32;&lt;&#32;k_turretMaxAngle&#32;&amp;&amp;&#32;angle&#32;&gt;&#32;<link linkend="__constants_8h_1a4aa2a23c2abeee1db7928f8ccce0ff13">k_turretMinAngle</link>)
<anchor xml:id="__turret_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;{
<anchor xml:id="__turret_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_anglePID.SetSetpoint(angle);
<anchor xml:id="__turret_8cpp_source_1l00140"/>00140 
<anchor xml:id="__turret_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;output&#32;=&#32;m_anglePID.Calculate(<link linkend="_class_turret_1a9a955b5d8d8569b9059dbf98db7be6aa">GetAngle</link>());
<anchor xml:id="__turret_8cpp_source_1l00142"/>00142 
<anchor xml:id="__turret_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_motor.Set(clamp(output,&#32;-<link linkend="__constants_8h_1ad9fb74357005b971bccf06162d4e46ef">k_turretMaxSpeed</link>,&#32;<link linkend="__constants_8h_1ad9fb74357005b971bccf06162d4e46ef">k_turretMaxSpeed</link>));
<anchor xml:id="__turret_8cpp_source_1l00144"/>00144 
<anchor xml:id="__turret_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_anglePID.AtSetpoint();
<anchor xml:id="__turret_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;}
<anchor xml:id="__turret_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__turret_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;{
<anchor xml:id="__turret_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__turret_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;}
<anchor xml:id="__turret_8cpp_source_1l00151"/>00151 }
<anchor xml:id="__turret_8cpp_source_1l00152"/>00152 
<anchor xml:id="__turret_8cpp_source_1l00153"/><link linkend="_class_turret_1a9a955b5d8d8569b9059dbf98db7be6aa">00153</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_class_turret_1a9a955b5d8d8569b9059dbf98db7be6aa">Turret::GetAngle</link>()
<anchor xml:id="__turret_8cpp_source_1l00154"/>00154 {
<anchor xml:id="__turret_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_turret_1ae3d7d4170a7755d24b8624adec4a26db">GetEncoder</link>()&#32;*&#32;360;
<anchor xml:id="__turret_8cpp_source_1l00156"/>00156 }
<anchor xml:id="__turret_8cpp_source_1l00157"/>00157 
<anchor xml:id="__turret_8cpp_source_1l00158"/><link linkend="_class_turret_1a64110a61bd1f885f3a41dc92856e541a">00158</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1a64110a61bd1f885f3a41dc92856e541a">Turret::ResetAnglePID</link>()
<anchor xml:id="__turret_8cpp_source_1l00159"/>00159 {
<anchor xml:id="__turret_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;m_anglePID.Reset();
<anchor xml:id="__turret_8cpp_source_1l00161"/>00161 }
<anchor xml:id="__turret_8cpp_source_1l00162"/>00162 
<anchor xml:id="__turret_8cpp_source_1l00163"/><link linkend="_class_turret_1a8e9064e74fda14f1dc9a0958503d752a">00163</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1a8e9064e74fda14f1dc9a0958503d752a">Turret::PrintAngle</link>()
<anchor xml:id="__turret_8cpp_source_1l00164"/>00164 {
<anchor xml:id="__turret_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Turret&#32;Angle&quot;</emphasis>,&#32;<link linkend="_class_turret_1a9a955b5d8d8569b9059dbf98db7be6aa">GetAngle</link>());
<anchor xml:id="__turret_8cpp_source_1l00166"/>00166 }
<anchor xml:id="__turret_8cpp_source_1l00167"/>00167 
<anchor xml:id="__turret_8cpp_source_1l00168"/><link linkend="_class_turret_1aa811c66bcde148e0e44b9010c596eea8">00168</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1aa811c66bcde148e0e44b9010c596eea8">Turret::PrintAnglePIDError</link>()
<anchor xml:id="__turret_8cpp_source_1l00169"/>00169 {
<anchor xml:id="__turret_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Turret&#32;Angle&#32;PID&#32;Error&quot;</emphasis>,&#32;m_anglePID.GetPositionError());
<anchor xml:id="__turret_8cpp_source_1l00171"/>00171 }
<anchor xml:id="__turret_8cpp_source_1l00172"/>00172 
<anchor xml:id="__turret_8cpp_source_1l00173"/><link linkend="_class_turret_1ade826b7d94686eb26a22240e6bf5cef5">00173</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_turret_1ade826b7d94686eb26a22240e6bf5cef5">Turret::Align</link>()
<anchor xml:id="__turret_8cpp_source_1l00174"/>00174 {
<anchor xml:id="__turret_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;m_alignPID.SetSetpoint(0);
<anchor xml:id="__turret_8cpp_source_1l00176"/>00176 
<anchor xml:id="__turret_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;output&#32;=&#32;m_alignPID.Calculate(-m_limelight.<link linkend="_class_limelight_1ab7d744c9a6d457f9a5ed8b98d5ecdf79">GetHorizontalAngle</link>());
<anchor xml:id="__turret_8cpp_source_1l00178"/>00178 
<anchor xml:id="__turret_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;m_motor.Set(clamp(output,&#32;-<link linkend="__constants_8h_1ad9fb74357005b971bccf06162d4e46ef">k_turretMaxSpeed</link>,&#32;<link linkend="__constants_8h_1ad9fb74357005b971bccf06162d4e46ef">k_turretMaxSpeed</link>));
<anchor xml:id="__turret_8cpp_source_1l00180"/>00180 
<anchor xml:id="__turret_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_alignPID.AtSetpoint();
<anchor xml:id="__turret_8cpp_source_1l00182"/>00182 }
<anchor xml:id="__turret_8cpp_source_1l00183"/>00183 
<anchor xml:id="__turret_8cpp_source_1l00184"/><link linkend="_class_turret_1ab15c596c80b5395d3c91de7eab59aa14">00184</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1ab15c596c80b5395d3c91de7eab59aa14">Turret::ResetAlignPID</link>()
<anchor xml:id="__turret_8cpp_source_1l00185"/>00185 {
<anchor xml:id="__turret_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;m_alignPID.Reset();
<anchor xml:id="__turret_8cpp_source_1l00187"/>00187 }
<anchor xml:id="__turret_8cpp_source_1l00188"/>00188 
<anchor xml:id="__turret_8cpp_source_1l00189"/><link linkend="_class_turret_1a0ed916a9383e4dd28e6d95ba4629fc2f">00189</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1a0ed916a9383e4dd28e6d95ba4629fc2f">Turret::PrintAlignPIDError</link>()
<anchor xml:id="__turret_8cpp_source_1l00190"/>00190 {
<anchor xml:id="__turret_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;SmartDashboard::PutNumber(<emphasis role="stringliteral">&quot;Turret&#32;Align&#32;PID&#32;Error&quot;</emphasis>,&#32;m_alignPID.GetPositionError());
<anchor xml:id="__turret_8cpp_source_1l00192"/>00192 }
<anchor xml:id="__turret_8cpp_source_1l00193"/>00193 
<anchor xml:id="__turret_8cpp_source_1l00194"/><link linkend="_class_turret_1a17c79f3bd5017e8927195523b8819356">00194</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_turret_1a17c79f3bd5017e8927195523b8819356">Turret::GetRightLimit</link>()
<anchor xml:id="__turret_8cpp_source_1l00195"/>00195 {
<anchor xml:id="__turret_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_limitSwitchRight.Get();
<anchor xml:id="__turret_8cpp_source_1l00197"/>00197 }
<anchor xml:id="__turret_8cpp_source_1l00198"/>00198 
<anchor xml:id="__turret_8cpp_source_1l00199"/><link linkend="_class_turret_1a0cd77f0b81e7df1ca3a20d1ac38cf856">00199</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_turret_1a0cd77f0b81e7df1ca3a20d1ac38cf856">Turret::GetLeftLimit</link>()
<anchor xml:id="__turret_8cpp_source_1l00200"/>00200 {
<anchor xml:id="__turret_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_limitSwitchLeft.Get();
<anchor xml:id="__turret_8cpp_source_1l00202"/>00202 }
<anchor xml:id="__turret_8cpp_source_1l00203"/>00203 
<anchor xml:id="__turret_8cpp_source_1l00204"/><link linkend="_class_turret_1a696d8b95e79c9093d7fa41a5dfd584a8">00204</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1a696d8b95e79c9093d7fa41a5dfd584a8">Turret::PrintLimits</link>()
<anchor xml:id="__turret_8cpp_source_1l00205"/>00205 {
<anchor xml:id="__turret_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;SmartDashboard::PutBoolean(<emphasis role="stringliteral">&quot;Turret&#32;Right&#32;Limit&quot;</emphasis>,&#32;<link linkend="_class_turret_1a17c79f3bd5017e8927195523b8819356">GetRightLimit</link>());
<anchor xml:id="__turret_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;SmartDashboard::PutBoolean(<emphasis role="stringliteral">&quot;Turret&#32;Left&#32;Limit&quot;</emphasis>,&#32;<link linkend="_class_turret_1a0cd77f0b81e7df1ca3a20d1ac38cf856">GetLeftLimit</link>());
<anchor xml:id="__turret_8cpp_source_1l00208"/>00208 }
<anchor xml:id="__turret_8cpp_source_1l00209"/>00209 
<anchor xml:id="__turret_8cpp_source_1l00210"/><link linkend="_class_turret_1a9237ad362784e3950e9057746fa43797">00210</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1a9237ad362784e3950e9057746fa43797">Turret::SetAngleSafetyActive</link>(<emphasis role="keywordtype">bool</emphasis>&#32;active)
<anchor xml:id="__turret_8cpp_source_1l00211"/>00211 {
<anchor xml:id="__turret_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;m_angleSafety&#32;=&#32;active;
<anchor xml:id="__turret_8cpp_source_1l00213"/>00213 }
<anchor xml:id="__turret_8cpp_source_1l00214"/>00214 
<anchor xml:id="__turret_8cpp_source_1l00215"/><link linkend="_class_turret_1a86ec06bd5b2f24bab0360c8c0661f66f">00215</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_turret_1a86ec06bd5b2f24bab0360c8c0661f66f">Turret::SetLimitSafetyActive</link>(<emphasis role="keywordtype">bool</emphasis>&#32;active)
<anchor xml:id="__turret_8cpp_source_1l00216"/>00216 {
<anchor xml:id="__turret_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;m_limitSafety&#32;=&#32;active;
<anchor xml:id="__turret_8cpp_source_1l00218"/>00218 }
</programlisting></section>
